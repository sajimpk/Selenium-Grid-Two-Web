pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "web_test_automation"
        SLACK_CHANNEL = 'C07C89YJY92'  // Your Slack channel ID
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out the repository...'
                checkout([$class: 'GitSCM',
                          branches: [[name: 'selenium_grid']],
                          userRemoteConfigs: [[url: 'https://github.com/tamim61qups/Web_Test_Automation.git',
                                               credentialsId: 'e679e005-9505-4158-9bc6-bc051648fd1e']]])
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building the Docker image...'
                script {
                    // Build the Docker image
                    sh 'docker build -t ${DOCKER_IMAGE} .'
                }
            }
        }

        stage('Run Tests in Docker') {
            steps {
                echo 'Running tests inside Docker container...'
                script {
                    // Run Docker container to execute the tests and capture output
                    def testOutput = sh(script: "docker run --rm -v '${WORKSPACE}/allure-results:/usr/src/app/allure-results' ${DOCKER_IMAGE}", returnStdout: true).trim()
                    writeFile file: 'testOutput.txt', text: testOutput
                }
            }
        }

        stage('Publish Allure Reports') {
            steps {
                echo 'Publishing Allure reports...'
                allure includeProperties: false,
                       jdk: '',
                       results: [[path: 'build/allure-results']]
            }
        }
    }

    post {
        always {
            echo 'Cleaning up Docker resources...'
            script {
                // Remove Docker image after execution
                sh 'docker rmi ${DOCKER_IMAGE} || true'
            }
        }
        success {
            echo 'Build and tests completed successfully!'
            script {
                def testSummary = parseTestSummary(readFile('testOutput.txt'))
                sendSlackNotification("Test Summary", 'good', testSummary)
            }
        }
        failure {
            echo 'Build or tests failed.'
            script {
                def testSummary = parseTestSummary(readFile('testOutput.txt'))
                sendSlackNotification("Test Summary", 'good', testSummary)
            }
        }
    }
}

def parseTestSummary(testOutput) {
    def summaryPattern = ~/Tests run: (\d+), Failures: (\d+), Errors: (\d+), Skipped: (\d+), Time elapsed: ([\d\.]+ [smh]+)/
    def matcher = summaryPattern.matcher(testOutput)
    if (matcher.find()) {
        def totalTests = matcher.group(1)
        def failures = matcher.group(2)
        def errors = matcher.group(3)
        def skipped = matcher.group(4)
        def elapsed = matcher.group(5)
        return "Total Tests: ${totalTests}\nFailures: ${failures}\nErrors: ${errors}\nSkipped: ${skipped}\nTime Elapsed: ${elapsed}"
    }
    return "Test summary not found."
}

def sendSlackNotification(message, color, testSummary) {
    def startTime = new Date()
    def startDateString = startTime.format("yyyy-MM-dd")
    def startTimeString = startTime.format("HH:mm:ss")
    
    slackSend (
        channel: "${env.SLACK_CHANNEL}",
        color: color,
        attachments: [
            [
                fallback: "Notification",
                text: "Notification:\n${message}\nStart Date: ${startDateString}\nStart Time: ${startTimeString}\n${testSummary}"
            ]
        ]
    )
}
